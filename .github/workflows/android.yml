name: Build Ionic APK

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Set up Node.js for Ionic/Vite
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Inject API Key into Manifest
        run: |
          sed -i 's/PLACEHOLDER_API_KEY/${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}/g' android/app/src/main/AndroidManifest.xml
          cat android/app/src/main/AndroidManifest.xml
      # cli has to be global otherwise cannot find it
      - name: Install Ionic
        run: npm install -g @ionic/cli
      - name: npm install
        run: npm ci
      # Install dependencies
      - name: Build Ionic App
        run: |
          ionic build --prod
          ionic cap sync android
          ionic cap copy android
        env:
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
          VITE_MAP_ID: ${{ secrets.VITE_MAP_ID }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_GAODE_API_KEY: ${{ secrets.VITE_GAODE_API_KEY }}
          VITE_GAODE_WEB_SERVICE_API_KEY: ${{ secrets.VITE_GAODE_WEB_SERVICE_API_KEY }}

      # Set up Java for Gradle
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew

      # Build APK
      - name: Build APK
        working-directory: android
        run: ./gradlew assembleRelease
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   with:
      #     tag_name: v1.0.0  
      #     release_name: Release v1.0.0
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      - name: Get Latest Release Tag
        id: get_tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            core.setOutput('tag_name', release.data.tag_name);

      - name: Upload APK to Release
        uses: softprops/action-gh-release@v1
        with:
          files: android/app/build/outputs/apk/release/app-release.apk
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          token: ${{ secrets.PAT_TOKEN }}

